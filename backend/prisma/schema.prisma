// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  role      String @default("ADMIN")
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  games Game[]

  @@map("categories")
}

model Game {
  id              Int      @id @default(autoincrement())
  title           String
  slug            String   @unique
  description     String
  longDescription String?
  thumbnail       String
  screenshots     String?  // JSON string of screenshot URLs
  categoryId      Int
  tags            String?  // JSON string of tag strings
  playCount       Int      @default(0)
  rating          Float?
  reviewCount     Int      @default(0)
  releaseDate     DateTime @default(now())
  developer       String?
  fileSize        String?
  fileUrl         String?
  gameUrl         String?  // For external hosted games
  isFeature       Boolean  @default(false)
  status          String @default("ACTIVE")
  views           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@map("games")
}

model Advertisement {
  id          Int     @id @default(autoincrement())
  name        String
  position    String
  size        String  // "300x250", "728x90", etc.
  code        String  // HTML/JS ad code
  isActive    Boolean @default(true)
  impressions Int     @default(0)
  clicks      Int     @default(0)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("advertisements")
}

model SearchQuery {
  id        Int      @id @default(autoincrement())
  query     String
  results   Int      @default(0)
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("search_queries")
}

model Analytics {
  id          Int      @id @default(autoincrement())
  date        DateTime
  pageViews   Int      @default(0)
  uniqueUsers Int      @default(0)
  gameViews   Int      @default(0)
  gamePlays   Int      @default(0)
  topGames    String?  // JSON string of top 10 games
  topSearches String?  // JSON string of top 10 searches
  createdAt   DateTime @default(now())

  @@unique([date])
  @@map("analytics")
}

model FileUpload {
  id         Int      @id @default(autoincrement())
  filename   String
  originalName String
  mimeType   String
  size       Int
  path       String
  url        String
  gameId     Int?     // Optional relation to game
  uploadedBy String?  // Admin username
  createdAt  DateTime @default(now())

  @@map("file_uploads")
}

// Note: SQLite doesn't support enums, so we use strings instead
// Valid values for reference:
// AdminRole: "SUPER_ADMIN", "ADMIN", "MODERATOR"
// GameStatus: "ACTIVE", "INACTIVE", "PENDING", "FEATURED"
// AdPosition: "HEADER", "SIDEBAR", "CONTENT", "FOOTER", "POPUP", "BANNER", "SKYSCRAPER"